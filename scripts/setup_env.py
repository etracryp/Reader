#!/usr/bin/env python3
"""
Environment Setup Script for Arbitrage Trading System
This script creates a complete .env file with all required environment variables.
"""

import os
import sys

def create_env_file():
    """Create a complete .env file with all required environment variables."""
    
    env_content = """# ========================================
# ARBITRAGE TRADING SYSTEM ENVIRONMENT
# ========================================
# This file was generated by setup_env.py
# Please fill in your actual API keys and secrets

# ========================================
# EXCHANGE API CREDENTIALS
# ========================================

# CEX.IO API Credentials
# Get from: https://cex.io/rest-api#rest-api
CEXIO_API_KEY=your_cexio_api_key_here
CEXIO_API_SECRET=your_cexio_api_secret_here

# Gate.io API Credentials  
# Get from: https://www.gate.com/docs/developers/apiv4/en/
GATEIO_API_KEY=your_gateio_api_key_here
GATEIO_API_SECRET=your_gateio_api_secret_here

# Binance API Credentials
# Get from: https://www.binance.com/en/my/settings/api-management
BINANCE_API_KEY=your_binance_api_key_here
BINANCE_API_SECRET=your_binance_api_secret_here

# ========================================
# SAFETY SETTINGS
# ========================================

# Minimum profit threshold (0.005 = 0.5%)
MIN_PROFIT_THRESHOLD=0.005

# Maximum number of trades per day
MAX_DAILY_TRADES=50

# Maximum position size in USDT
MAX_POSITION_SIZE=1000

# Cooldown between trades in seconds
TRADE_COOLDOWN=30

# ========================================
# WEB UI SETTINGS
# ========================================

# Flask secret key (change in production)
FLASK_SECRET_KEY=your-secret-key-change-this-in-production

# Debug mode (True/False)
FLASK_DEBUG=True

# Host and port for web interface
FLASK_HOST=0.0.0.0
FLASK_PORT=5000

# ========================================
# TRADING CONFIGURATION
# ========================================

# Minimum trade size in USDT
MIN_TRADE_SIZE=10

# WebSocket reconnection settings
RECONNECT_DELAY=5000
MAX_RECONNECT_ATTEMPTS=10

# Order timeout in seconds
ORDER_TIMEOUT=30

# ========================================
# LOGGING CONFIGURATION
# ========================================

# Log level (DEBUG, INFO, WARNING, ERROR)
LOG_LEVEL=INFO

# Log file path
LOG_FILE=logs/arbitrage_system.log

# ========================================
# DATABASE SETTINGS (for future use)
# ========================================

# Database URL (SQLite by default)
DATABASE_URL=sqlite:///trading_system.db

# ========================================
# NOTIFICATION SETTINGS
# ========================================

# Email notifications (True/False)
ENABLE_EMAIL_NOTIFICATIONS=False

# SMS notifications (True/False)  
ENABLE_SMS_NOTIFICATIONS=False

# Telegram notifications (True/False)
ENABLE_TELEGRAM_NOTIFICATIONS=False

# ========================================
# RISK MANAGEMENT
# ========================================

# Enable emergency stop functionality
EMERGENCY_STOP_ENABLED=True

# Auto stop on large loss
AUTO_STOP_ON_LARGE_LOSS=True

# Maximum daily loss in USDT
MAX_DAILY_LOSS=1000

# Maximum single trade loss in USDT
MAX_SINGLE_TRADE_LOSS=100

# ========================================
# PERFORMANCE MONITORING
# ========================================

# Enable performance monitoring
ENABLE_PERFORMANCE_MONITORING=True

# Performance log interval in seconds
PERFORMANCE_LOG_INTERVAL=300

# ========================================
# EXCHANGE-SPECIFIC SETTINGS
# ========================================

# CEX.IO specific settings
CEXIO_RATE_LIMIT=600
CEXIO_TIMEOUT=30

# Gate.io specific settings
GATEIO_RATE_LIMIT=100
GATEIO_TIMEOUT=30

# Binance specific settings
BINANCE_RATE_LIMIT=1200
BINANCE_TIMEOUT=30

# ========================================
# TRADING PAIRS CONFIGURATION
# ========================================

# Comma-separated list of trading pairs to monitor
TRADING_PAIRS=BTCUSDT,ETHUSDT,BNBUSDT,ADAUSDT,DOTUSDT,LINKUSDT,LTCUSDT,BCHUSDT

# ========================================
# ADVANCED SETTINGS
# ========================================

# Enable/disable specific exchanges
ENABLE_CEX=True
ENABLE_GATE=True
ENABLE_BINANCE=True

# WebSocket heartbeat interval (seconds)
WEBSOCKET_HEARTBEAT=30

# Price update frequency (seconds)
PRICE_UPDATE_FREQUENCY=1

# Arbitrage check frequency (seconds)
ARBITRAGE_CHECK_FREQUENCY=5

# ========================================
# DEVELOPMENT SETTINGS
# ========================================

# Enable debug mode for development
DEBUG_MODE=True

# Enable verbose logging
VERBOSE_LOGGING=True

# Test mode (disables actual trading)
TEST_MODE=False

# ========================================
# BACKUP AND RECOVERY
# ========================================

# Enable automatic backups
ENABLE_BACKUPS=True

# Backup frequency (hours)
BACKUP_FREQUENCY=24

# Backup retention (days)
BACKUP_RETENTION=7
"""
    
    # Create .env file
    env_file_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env')
    
    try:
        with open(env_file_path, 'w') as f:
            f.write(env_content)
        print(f"‚úÖ Environment file created successfully: {env_file_path}")
        print("\nüìù Next steps:")
        print("1. Edit the .env file and replace the placeholder values with your actual API keys")
        print("2. Make sure to keep your API keys secure and never commit them to version control")
        print("3. Run 'python main.py' to start the arbitrage system")
        print("4. Run 'python ui/app.py' to start the web interface")
        return True
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return False

def main():
    """Main function to run the environment setup."""
    print("üöÄ Arbitrage Trading System - Environment Setup")
    print("=" * 50)
    
    if create_env_file():
        print("\nüéâ Setup completed successfully!")
        print("\nüìã Required API Keys:")
        print("- CEX.IO: https://cex.io/rest-api#rest-api")
        print("- Gate.io: https://www.gate.com/docs/developers/apiv4/en/")
        print("- Binance: https://www.binance.com/en/my/settings/api-management")
    else:
        print("\n‚ùå Setup failed. Please check the error message above.")
        sys.exit(1)

if __name__ == "__main__":
    main() 